# Add edge if distance is within the maximum allowed distance
if (!is.na(dist) && dist <= max_distance) {
edges <- rbind(edges, data.frame(from = class_data$unique_id[i], to = class_data$unique_id[j]))
}
}
}
}
}
# Filter edges to ensure IDs are in nodes
edges <- edges %>%
filter(from %in% nodes$unique_id & to %in% nodes$unique_id)
# Create the graph from edges and nodes
g <- graph_from_data_frame(d = edges, vertices = nodes, directed = FALSE)
V(g)$activity_class <- nodes$activity_class
# Map `activity_class` to colors
activity_classes <- unique(nodes$activity_class)
color_palette <- brewer.pal(n = length(activity_classes), name = "Set3")  # Customize with any color palette you prefer
activity_colors <- setNames(color_palette, activity_classes)  # Map each activity_class to a color
# Apply colors to nodes based on `activity_class`
V(g)$color <- activity_colors[V(g)$activity_class]
# Node sizes based on `current_size`
V(g)$size <- log(nodes$current_size + 1) * 2
# Adjust node colors for transparency
node_colors <- adjustcolor(V(g)$color, alpha.f = 0.5)  # 70% opacity
# Adjust edge color for transparency
edge_color <- adjustcolor("red", alpha.f = 1)
# Plot the network with Kamada-Kawai layout
layout_kk <- layout_with_kk(g)
plot(g,
layout = layout_kk,
vertex.size = V(g)$size,
vertex.color = node_colors,  # Transparent node colors
vertex.label = NA,
edge.color = edge_color,      # Transparent edge color
edge.width = 2,
main = "Wildfire Network of Top 25 Fires per Year KK (Clustered by Activity Class)")
legend("right",
legend = names(activity_colors),
col = activity_colors,
pch = 16,
pt.cex = 1.5,   # Increase point size in legend for visibility
title = "Activity Class",
xpd = TRUE,
inset = -0.05,
bg = adjustcolor("white", alpha.f = 0.8))  # Transparent legend background
layout_fr <- layout_with_fr(g)
plot(g,
layout = layout_fr,
vertex.size = V(g)$size,
vertex.color = node_colors,
vertex.label = NA,
edge.color = edge_color,
edge.width = 2,   # Keep a higher width for better visibility
main = "Wildfire Network of Top 25 Fires per Year FR (Clustered by Activity Class)")
legend("right",
legend = names(activity_colors),
col = activity_colors,
pch = 16,
pt.cex = 1.5,   # Increase point size in legend for visibility
title = "Activity Class",
xpd = TRUE,
inset = -0.05,
bg = adjustcolor("white", alpha.f = 0.8))  # Transparent legend background
cat("Number of edges in graph:", ecount(g), "\n")
cat("Number of vertices in graph:", vcount(g), "\n")
# Fixed bounding box for Canada
register_stadiamaps("59b82ef6-c67a-4d54-ac10-301e0edb43e4", write = TRUE)
# Data Analysis on the given data
Degree_centrality <- degree(g)
Closeness_centrality <- closeness(g)
Betweenness_centrality <- betweenness(g)
Eigenvector_centrality <- evcent(g)$vector
Clustering_coefficient <- transitivity(g, type = "local")
# Combine centrality measures into a data frame
centrality_measures <- data.frame(
node = V(g)$name,
degree = Degree_centrality,
closeness = Closeness_centrality,
betweenness = Betweenness_centrality,
eigenvector = Eigenvector_centrality,
clustering = Clustering_coefficient
)
summary(centrality_measures)
# Top 5 nodes by degree centrality
top_degree <- centrality_measures[order(-centrality_measures$degree), ]
head(top_degree, 5)
# Top 5 nodes by closeness centrality
top_closeness <- centrality_measures[order(-centrality_measures$closeness), ]
head(top_closeness, 5)
# Top 5 nodes by betweenness centrality
top_betweenness <- centrality_measures[order(-centrality_measures$betweenness), ]
head(top_betweenness, 5)
# Top 5 nodes by eigenvector centrality
top_eigenvector <- centrality_measures[order(-centrality_measures$eigenvector), ]
head(top_eigenvector, 5)
# Top 5 nodes by clustering coefficient
top_clustering <- centrality_measures[order(-centrality_measures$clustering), ]
head(top_clustering, 5)
# Plotting the centrality measures
# Common causes of wildfires
#filtering data as to prevent any missing values and in turn creating issues
wildfire_filtered <- wildfire_data %>%
mutate(across(where(is.character), ~ trimws(.))) %>% # Remove whitespace
filter(!is.na(fire_location_latitude), !is.na(fire_location_longitude), !is.na(activity_class)) %>%
mutate(activity_class = as.factor(activity_class))
# Converting wildire coordinates to spatial data and using cors=4326 as it is the most common coordinate system for latitude and longitude.
wildfire_sf <- st_as_sf(
wildfire_filtered,
coords = c("fire_location_longitude", "fire_location_latitude"),
crs = 4326
)
#matrix that stores a point (i.e wildire ) and its coordinates
coords <- st_coordinates(wildfire_sf)
wild_fire_db <- dbscan(coords, eps = 0.2, minPts = 5) #using a small eps value to prevent any overlapping of clusters and having a better understanding of the causes of the fire
# Add cluster information to the spatial data
wildfire_sf <- wildfire_sf %>%
mutate(cluster = as.factor(wild_fire_db$cluster))
# Finding the common causes of wildfires and their average size
common_causes <- wildfire_sf %>%
group_by(activity_class) %>%
summarise(
count = n(),
avg_fire_size = mean(current_size, na.rm = TRUE)
) %>%
arrange(desc(count))
print("Most Common Causes of Wildfires:")
print(common_causes)
# Effect of causes on spread and clustering
spread_and_clustering <- wildfire_sf %>%
group_by(activity_class) %>%
summarise(
avg_spread_rate = mean(fire_spread_rate, na.rm = TRUE),
avg_cluster_size = mean(current_size, na.rm = TRUE),
cluster_count = n_distinct(cluster)
)%>%
arrange(desc(cluster_count))
print("Effect of Causes on Spread and Clustering:")
print(spread_and_clustering)
# Plotting the wildfire clusters on a map of Canada
canada_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(admin == "Canada")
# Plot wildfire clusters on the map
ggplot() +
geom_sf(data = canada_map, fill = "lightgray", color = "white") + # Map of Canada
geom_sf(data = wildfire_sf, aes(color = activity_class), alpha = 0.8) + # Wildfire points
labs(
title = "Wildfire Clusters in Canada",
color = "Activity Class"
) +
theme_minimal()
# Data Analysis on the given data
Degree_centrality <- degree(g)
Closeness_centrality <- closeness(g)
Betweenness_centrality <- betweenness(g)
Eigenvector_centrality <- evcent(g)$vector
Clustering_coefficient <- transitivity(g, type = "local")
# Combine centrality measures into a data frame
centrality_measures <- data.frame(
node = V(g)$name,
degree = Degree_centrality,
closeness = Closeness_centrality,
betweenness = Betweenness_centrality,
eigenvector = Eigenvector_centrality,
clustering = Clustering_coefficient
)
summary(centrality_measures)
# Top 5 nodes by degree centrality
top_degree <- centrality_measures[order(-centrality_measures$degree), ]
head(top_degree, 5)
# Top 5 nodes by closeness centrality
top_closeness <- centrality_measures[order(-centrality_measures$closeness), ]
head(top_closeness, 5)
# Top 5 nodes by betweenness centrality
top_betweenness <- centrality_measures[order(-centrality_measures$betweenness), ]
head(top_betweenness, 5)
# Top 5 nodes by eigenvector centrality
top_eigenvector <- centrality_measures[order(-centrality_measures$eigenvector), ]
head(top_eigenvector, 5)
# Top 5 nodes by clustering coefficient
top_clustering <- centrality_measures[order(-centrality_measures$clustering), ]
head(top_clustering, 5)
# Plotting the centrality measures
# Load necessary libraries
library(dplyr)
library(igraph)
library(geosphere)
library(ggplot2)
library(sf)
library(RColorBrewer)
library(viridis)
library(stringr)
library(dbscan)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggspatial)
wildfire_data <- read.csv("data_clean.csv")
# Filter top 100 fires per year based on `current_size`
top_fires <- wildfire_data %>%
group_by(fire_year) %>%
arrange(desc(current_size)) %>%
slice_head(n = 25) %>%
ungroup()
# Create a unique identifier by combining `fire_year` and `fire_number`
top_fires <- top_fires %>%
mutate(unique_id = paste(fire_year, fire_number, sep = "_"))
# Prepare nodes (distinct fires with geographical coordinates)
nodes <- top_fires %>%
select(unique_id, fire_location_latitude, fire_location_longitude, current_size, fire_year, activity_class) %>%
distinct()
# Define edges based on geographical proximity within each year
max_distance <- 50000  # Set max distance to 20 km for connecting fires
# Define edges based on geographical proximity within each `activity_class`
edges <- data.frame(from = character(), to = character(), stringsAsFactors = FALSE)
# Loop to create edges within each `activity_class` group based on proximity
for (class in unique(top_fires$activity_class)) {
# Filter data for the current activity class and remove rows with missing coordinates
class_data <- top_fires %>%
filter(activity_class == class) %>%
filter(!is.na(fire_location_latitude) & !is.na(fire_location_longitude))
# Skip if no rows remain after filtering
if (nrow(class_data) < 2) {
next  # Skip this iteration if there arenâ€™t enough points to form edges
}
# Nested loop to calculate distances and create edges
for (i in 1:(nrow(class_data) - 1)) {
for (j in (i + 1):nrow(class_data)) {
# Extract the coordinates as pairs
coord_i <- c(class_data$fire_location_longitude[i], class_data$fire_location_latitude[i])
coord_j <- c(class_data$fire_location_longitude[j], class_data$fire_location_latitude[j])
# Check if coordinates are valid pairs of length 2
if (length(coord_i) == 2 && length(coord_j) == 2) {
# Calculate distance between points
dist <- distHaversine(coord_i, coord_j)
# Add edge if distance is within the maximum allowed distance
if (!is.na(dist) && dist <= max_distance) {
edges <- rbind(edges, data.frame(from = class_data$unique_id[i], to = class_data$unique_id[j]))
}
}
}
}
}
# Filter edges to ensure IDs are in nodes
edges <- edges %>%
filter(from %in% nodes$unique_id & to %in% nodes$unique_id)
# Create the graph from edges and nodes
g <- graph_from_data_frame(d = edges, vertices = nodes, directed = FALSE)
V(g)$activity_class <- nodes$activity_class
# Map `activity_class` to colors
activity_classes <- unique(nodes$activity_class)
color_palette <- brewer.pal(n = length(activity_classes), name = "Set3")  # Customize with any color palette you prefer
activity_colors <- setNames(color_palette, activity_classes)  # Map each activity_class to a color
# Apply colors to nodes based on `activity_class`
V(g)$color <- activity_colors[V(g)$activity_class]
# Node sizes based on `current_size`
V(g)$size <- log(nodes$current_size + 1) * 2
# Adjust node colors for transparency
node_colors <- adjustcolor(V(g)$color, alpha.f = 0.5)  # 70% opacity
# Adjust edge color for transparency
edge_color <- adjustcolor("red", alpha.f = 1)
# Plot the network with Kamada-Kawai layout
layout_kk <- layout_with_kk(g)
plot(g,
layout = layout_kk,
vertex.size = V(g)$size,
vertex.color = node_colors,  # Transparent node colors
vertex.label = NA,
edge.color = edge_color,      # Transparent edge color
edge.width = 2,
main = "Wildfire Network of Top 25 Fires per Year KK (Clustered by Activity Class)")
legend("right",
legend = names(activity_colors),
col = activity_colors,
pch = 16,
pt.cex = 1.5,   # Increase point size in legend for visibility
title = "Activity Class",
xpd = TRUE,
inset = -0.05,
bg = adjustcolor("white", alpha.f = 0.8))  # Transparent legend background
layout_fr <- layout_with_fr(g)
plot(g,
layout = layout_fr,
vertex.size = V(g)$size,
vertex.color = node_colors,
vertex.label = NA,
edge.color = edge_color,
edge.width = 2,   # Keep a higher width for better visibility
main = "Wildfire Network of Top 25 Fires per Year FR (Clustered by Activity Class)")
legend("right",
legend = names(activity_colors),
col = activity_colors,
pch = 16,
pt.cex = 1.5,   # Increase point size in legend for visibility
title = "Activity Class",
xpd = TRUE,
inset = -0.05,
bg = adjustcolor("white", alpha.f = 0.8))  # Transparent legend background
cat("Number of edges in graph:", ecount(g), "\n")
cat("Number of vertices in graph:", vcount(g), "\n")
# Fixed bounding box for Canada
register_stadiamaps("59b82ef6-c67a-4d54-ac10-301e0edb43e4", write = TRUE)
# Fixed bounding box for Canada
register_stadiamaps("59b82ef6-c67a-4d54-ac10-301e0edb43e4", write = TRUE)
# Load necessary libraries
library(dplyr)
library(igraph)
library(geosphere)
library(ggplot2)
library(sf)
library(RColorBrewer)
library(viridis)
library(stringr)
library(dbscan)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggspatial)
library(scales)
wildfire_data <- read.csv("data_clean.csv")
# Filter top 100 fires per year based on `current_size`
top_fires <- wildfire_data %>%
group_by(fire_year) %>%
arrange(desc(current_size)) %>%
slice_head(n = 25) %>%
ungroup()
# Create a unique identifier by combining `fire_year` and `fire_number`
top_fires <- top_fires %>%
mutate(unique_id = paste(fire_year, fire_number, sep = "_"))
# Prepare nodes (distinct fires with geographical coordinates)
nodes <- top_fires %>%
select(unique_id, fire_location_latitude, fire_location_longitude, current_size, fire_year, activity_class) %>%
distinct()
# Define edges based on geographical proximity within each year
max_distance <- 50000  # Set max distance to 20 km for connecting fires
# Define edges based on geographical proximity within each `activity_class`
edges <- data.frame(from = character(), to = character(), stringsAsFactors = FALSE)
# Loop to create edges within each `activity_class` group based on proximity
for (class in unique(top_fires$activity_class)) {
# Filter data for the current activity class and remove rows with missing coordinates
class_data <- top_fires %>%
filter(activity_class == class) %>%
filter(!is.na(fire_location_latitude) & !is.na(fire_location_longitude))
# Skip if no rows remain after filtering
if (nrow(class_data) < 2) {
next  # Skip this iteration if there arenâ€™t enough points to form edges
}
# Nested loop to calculate distances and create edges
for (i in 1:(nrow(class_data) - 1)) {
for (j in (i + 1):nrow(class_data)) {
# Extract the coordinates as pairs
coord_i <- c(class_data$fire_location_longitude[i], class_data$fire_location_latitude[i])
coord_j <- c(class_data$fire_location_longitude[j], class_data$fire_location_latitude[j])
# Check if coordinates are valid pairs of length 2
if (length(coord_i) == 2 && length(coord_j) == 2) {
# Calculate distance between points
dist <- distHaversine(coord_i, coord_j)
# Add edge if distance is within the maximum allowed distance
if (!is.na(dist) && dist <= max_distance) {
edges <- rbind(edges, data.frame(from = class_data$unique_id[i], to = class_data$unique_id[j]))
}
}
}
}
}
# Filter edges to ensure IDs are in nodes
edges <- edges %>%
filter(from %in% nodes$unique_id & to %in% nodes$unique_id)
# Create the graph from edges and nodes
g <- graph_from_data_frame(d = edges, vertices = nodes, directed = FALSE)
V(g)$activity_class <- nodes$activity_class
# Map `activity_class` to colors
activity_classes <- unique(nodes$activity_class)
color_palette <- brewer.pal(n = length(activity_classes), name = "Set3")  # Customize with any color palette you prefer
activity_colors <- setNames(color_palette, activity_classes)  # Map each activity_class to a color
# Apply colors to nodes based on `activity_class`
V(g)$color <- activity_colors[V(g)$activity_class]
# Node sizes based on `current_size`
V(g)$size <- log(nodes$current_size + 1) * 2
# Adjust node colors for transparency
node_colors <- adjustcolor(V(g)$color, alpha.f = 0.5)  # 70% opacity
# Adjust edge color for transparency
edge_color <- adjustcolor("red", alpha.f = 1)
# Plot the network with Kamada-Kawai layout
layout_kk <- layout_with_kk(g)
plot(g,
layout = layout_kk,
vertex.size = V(g)$size,
vertex.color = node_colors,  # Transparent node colors
vertex.label = NA,
edge.color = edge_color,      # Transparent edge color
edge.width = 2,
main = "Wildfire Network of Top 25 Fires per Year KK (Clustered by Activity Class)")
legend("right",
legend = names(activity_colors),
col = activity_colors,
pch = 16,
pt.cex = 1.5,   # Increase point size in legend for visibility
title = "Activity Class",
xpd = TRUE,
inset = -0.05,
bg = adjustcolor("white", alpha.f = 0.8))  # Transparent legend background
layout_fr <- layout_with_fr(g)
plot(g,
layout = layout_fr,
vertex.size = V(g)$size,
vertex.color = node_colors,
vertex.label = NA,
edge.color = edge_color,
edge.width = 2,   # Keep a higher width for better visibility
main = "Wildfire Network of Top 25 Fires per Year FR (Clustered by Activity Class)")
legend("right",
legend = names(activity_colors),
col = activity_colors,
pch = 16,
pt.cex = 1.5,   # Increase point size in legend for visibility
title = "Activity Class",
xpd = TRUE,
inset = -0.05,
bg = adjustcolor("white", alpha.f = 0.8))  # Transparent legend background
cat("Number of edges in graph:", ecount(g), "\n")
cat("Number of vertices in graph:", vcount(g), "\n")
# Define a bounding box for British Columbia (Longitude and Latitude range)
bc_bounds <- list(
lon_min = -140,
lon_max = -114,
lat_min = 48,
lat_max = 60
)
# Filter data for British Columbia
wildfire_filtered <- wildfire_data %>%
filter(
!is.na(fire_location_latitude),
!is.na(fire_location_longitude),
!is.na(current_size),
fire_location_longitude >= bc_bounds$lon_min,
fire_location_longitude <= bc_bounds$lon_max,
fire_location_latitude >= bc_bounds$lat_min,
fire_location_latitude <= bc_bounds$lat_max
) %>%
mutate(fire_year = as.factor(fire_year))
# Identify top fires for each year based on size
top_fires <- wildfire_filtered %>%
group_by(fire_year) %>%
arrange(desc(current_size)) %>%
slice_head(n = 10) %>%
ungroup()
# Create clusters using DBSCAN
coords <- top_fires %>%
select(fire_location_longitude, fire_location_latitude) %>%
as.matrix()
fire_clusters <- dbscan(coords, eps = 0.5, minPts = 3)
# Add cluster information to the dataset
top_fires <- top_fires %>%
mutate(cluster = as.factor(fire_clusters$cluster))
# Simplified map using ggplot
ggplot() +
geom_point(data = top_fires,
aes(
x = fire_location_longitude,
y = fire_location_latitude,
size = current_size,
color = cluster
),
alpha = 0.8) +
labs(
title = "Top Wildfires by Size with Clusters (British Columbia)",
x = "Longitude",
y = "Latitude",
size = "Fire Size",
color = "Cluster"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.box = "vertical"
) +
guides(color = guide_legend(ncol = 1)) # Ensure all clusters are visible
# Define a bounding box for British Columbia (Longitude and Latitude range)
bc_bounds <- list(
lon_min = -140,
lon_max = -114,
lat_min = 48,
lat_max = 60
)
# Filter data for British Columbia
wildfire_filtered <- wildfire_data %>%
filter(
!is.na(fire_location_latitude),
!is.na(fire_location_longitude),
!is.na(current_size),
fire_location_longitude >= bc_bounds$lon_min,
fire_location_longitude <= bc_bounds$lon_max,
fire_location_latitude >= bc_bounds$lat_min,
fire_location_latitude <= bc_bounds$lat_max
) %>%
mutate(fire_year = as.factor(fire_year))
# Identify top fires for each year based on size
top_fires <- wildfire_filtered %>%
group_by(fire_year) %>%
arrange(desc(current_size)) %>%
slice_head(n = 10) %>%
ungroup()
# Create clusters using DBSCAN
coords <- top_fires %>%
select(fire_location_longitude, fire_location_latitude) %>%
as.matrix()
fire_clusters <- dbscan(coords, eps = 0.5, minPts = 3)
# Add cluster information to the dataset
top_fires <- top_fires %>%
mutate(cluster = as.factor(fire_clusters$cluster))
# Load a map of British Columbia using rnaturalearth
canada_map <- ne_states(country = "Canada", returnclass = "sf")
